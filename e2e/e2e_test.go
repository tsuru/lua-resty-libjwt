package e2e_test

import (
	"context"
	"fmt"
	"net/http"
	"os"
	"testing"
	"time"

	assertTestify "github.com/stretchr/testify/assert"
	container_test "github.com/tsuru/lua-resty-libjwt/e2e/container"
	jwks_test "github.com/tsuru/lua-resty-libjwt/e2e/jwks"
	request_test "github.com/tsuru/lua-resty-libjwt/e2e/request"
)

func TestNginxContainer(t *testing.T) {
	assert := assertTestify.New(t)
	ctx := context.Background()
	var err error
	var containerTest container_test.ContainerInterface

	jwks1, privateKey1, err := jwks_test.GenerateJWKSAndRSAPrivate(
		jwks_test.JWKSParams{KID: "tsuru-kid-123"})
	assert.NoError(err)

	jwks2, privateKey2, err := jwks_test.GenerateJWKSAndRSAPrivate(
		jwks_test.JWKSParams{KID: "kid-654321"})
	assert.NoError(err)

	err = os.WriteFile("./nginx/jwks_1.json", []byte(jwks1), 0644)
	assert.NoError(err)

	err = os.WriteFile("./nginx/jwks_2.json", []byte(jwks2), 0644)
	assert.NoError(err)

	containerTest, err = container_test.New(ctx, "..", "Dockerfile.e2e")
	assert.NoError(err)
	containerTestProps := containerTest.GetProps()
	assert.NoError(err)

	URL := fmt.Sprintf("http://%s:%s/private", containerTestProps.IP, containerTestProps.Port)

	t.Run("Should successfully return the nginx.default request", func(t *testing.T) {
		t.Parallel()
		assert := assertTestify.New(t)
		body, statusCode, err := request_test.Do(request_test.Params{URL: fmt.Sprintf("http://%s:%s", containerTestProps.IP, containerTestProps.Port)})
		assert.NoError(err)
		assert.Equal(http.StatusOK, statusCode)
		assert.Equal("{\"message\": \"content by nginx\"}", string(body))
	})
	t.Run("Should return an error when JWT is missing the kid", func(t *testing.T) {
		t.Parallel()

		assert := assertTestify.New(t)

		jwtWithoutKID, err := jwks_test.CreateJWT(privateKey1, jwks_test.JWTParams{
			KID: "",
		})
		assert.NoError(err)

		body, statusCode, err := request_test.Do(request_test.Params{
			URL:         URL,
			HeaderKey:   "Authorization",
			HeaderValue: fmt.Sprintf("Bearer %s", jwtWithoutKID),
		})
		assert.NoError(err)
		assert.Equal(http.StatusUnauthorized, statusCode)
		assert.Equal("{\"message\":\"kid not found\"}\n", string(body))
	})

	t.Run("Should return an error when JWT is generated by another key", func(t *testing.T) {
		t.Parallel()

		assert := assertTestify.New(t)

		keyPrivate, _, _ := jwks_test.GenerateRSAKeys()
		jwtWithAnotherKey, err := jwks_test.CreateJWT(keyPrivate, jwks_test.JWTParams{
			KID: "tsuru-kid-123",
		})
		assert.NoError(err)
		body, statusCode, err := request_test.Do(request_test.Params{
			URL:         URL,
			HeaderKey:   "Authorization",
			HeaderValue: fmt.Sprintf("Bearer %s", jwtWithAnotherKey),
		})
		assert.NoError(err)
		assert.Equal(http.StatusUnauthorized, statusCode)
		assert.Equal("{\"message\":\"invalid token\"}\n", string(body))
	})
	t.Run("Should return an error when JWT header is not a token", func(t *testing.T) {
		t.Parallel()

		assert := assertTestify.New(t)
		body, statusCode, err := request_test.Do(request_test.Params{
			URL:         URL,
			HeaderKey:   "Authorization",
			HeaderValue: "Bearer 123",
		})
		assert.NoError(err)
		assert.Equal(http.StatusUnauthorized, statusCode)
		assert.Equal("{\"message\":\"invalid JWT\"}\n", string(body))
	})
	t.Run("Should return an error when JWT header is missing a token", func(t *testing.T) {
		t.Parallel()
		assert := assertTestify.New(t)
		body, statusCode, err := request_test.Do(request_test.Params{
			URL:         URL,
			HeaderKey:   "Authorization",
			HeaderValue: "Bearer",
		})
		assert.NoError(err)
		assert.Equal(http.StatusUnauthorized, statusCode)
		assert.Equal("{\"message\":\"token not found\"}\n", string(body))
	})
	t.Run("Should return an error when kid in JWT is different from JWKS", func(t *testing.T) {
		t.Parallel()
		assert := assertTestify.New(t)

		jwt, err := jwks_test.CreateJWT(privateKey1, jwks_test.JWTParams{
			KID: "tsuru-kid-456",
		})
		assert.NoError(err)

		body, statusCode, err := request_test.Do(request_test.Params{
			URL:         URL,
			HeaderKey:   "Authorization",
			HeaderValue: fmt.Sprintf("Bearer %s", jwt),
		})
		assert.NoError(err)
		assert.Equal(http.StatusUnauthorized, statusCode)
		assert.Equal("{\"message\":\"invalid token\"}\n", string(body))
	})
	t.Run("Should return an error when token in header is different from the parameter", func(t *testing.T) {
		t.Parallel()
		assert := assertTestify.New(t)
		jwt, err := jwks_test.CreateJWT(privateKey1, jwks_test.JWTParams{
			KID: "tsuru-kid-123",
		})
		assert.NoError(err)
		body, statusCode, err := request_test.Do(request_test.Params{
			URL:         URL,
			HeaderKey:   "Token",
			HeaderValue: fmt.Sprintf("Bearer %s", jwt),
		})
		assert.NoError(err)
		assert.Equal(http.StatusUnauthorized, statusCode)
		assert.Equal("{\"message\":\"token not found\"}\n", string(body))
	})

	t.Run("Should return an error when JWT is expired", func(t *testing.T) {
		t.Parallel()
		assert := assertTestify.New(t)
		date := time.Now()
		jwt, err := jwks_test.CreateJWT(
			privateKey1,
			jwks_test.JWTParams{KID: "tsuru-kid-123", Iat: date.Add(-2 * time.Hour).Unix(), Exp: date.Add(-1 * time.Hour).Unix()},
		)
		assert.NoError(err)
		body, statusCode, err := request_test.Do(request_test.Params{
			URL:         URL,
			HeaderKey:   "Authorization",
			HeaderValue: fmt.Sprintf("Bearer %s", jwt),
		})
		assert.NoError(err)
		assert.Equal(http.StatusUnauthorized, statusCode)
		assert.Equal("{\"message\":\"invalid token\"}\n", string(body))
	})

	t.Run("Should ignore validation when method is OPTIONS", func(t *testing.T) {
		t.Parallel()
		assert := assertTestify.New(t)
		assert.NoError(err)
		body, statusCode, err := request_test.Do(request_test.Params{
			Method:    http.MethodOptions,
			URL:       URL,
			HeaderKey: "Authorization",
		})
		assert.NoError(err)
		assert.Equal(http.StatusAccepted, statusCode)
		assert.Equal("{\"message\":\"Validation by passed\"}\n", string(body))
	})

	t.Run("Should return success when a valid JWKS is provided", func(t *testing.T) {
		t.Parallel()
		assert := assertTestify.New(t)

		jwtRequest, err := jwks_test.CreateJWT(
			privateKey1,
			jwks_test.JWTParams{KID: "kid-654321"})
		assert.NoError(err)

		body, statusCode, err := request_test.Do(request_test.Params{
			URL:         URL,
			HeaderKey:   "Authorization",
			HeaderValue: fmt.Sprintf("Bearer %s", jwtRequest),
		})
		assert.NoError(err)
		assert.Equal(http.StatusUnauthorized, statusCode)
		assert.Equal("{\"message\":\"invalid token\"}\n", string(body))

		jwtRequest, err = jwks_test.CreateJWT(
			privateKey2,
			jwks_test.JWTParams{KID: "kid-654321"})
		assert.NoError(err)
		_, statusCode, err = request_test.Do(request_test.Params{
			URL:         URL,
			HeaderKey:   "Authorization",
			HeaderValue: fmt.Sprintf("Bearer %s", jwtRequest),
		})
		assert.NoError(err)
		assert.Equal(http.StatusOK, statusCode)
	})

}
