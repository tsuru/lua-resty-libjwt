package e2e_test

import (
	"context"
	"fmt"
	"net/http"
	"testing"

	assertTestify "github.com/stretchr/testify/assert"
	container_test "github.com/tsuru/lua-resty-libjwt/e2e/container"
	jwks_test "github.com/tsuru/lua-resty-libjwt/e2e/jwks"
	request_test "github.com/tsuru/lua-resty-libjwt/e2e/request"
)

func TestNginxContainer(t *testing.T) {
	assert := assertTestify.New(t)
	ctx := context.Background()
	var err error
	var containerTest container_test.ContainerInterface
	containerTest, err = container_test.New(ctx, "..", "Dockerfile.nginx")
	containerTestProps := containerTest.GetProps()
	assert.NoError(err)
	defer containerTest.Terminate()
	URL := fmt.Sprintf("http://%s:%s/private", containerTestProps.IP, containerTestProps.Port)

	t.Run("Should return request of nginx.default with success", func(t *testing.T) {
		assert := assertTestify.New(t)
		containerTest.NginxToConfigDefault()
		containerTest.Clear()
		body, statusCode, err := request_test.Do(request_test.Params{URL: URL})
		assert.NoError(err)
		assert.Equal(http.StatusOK, statusCode)
		assert.Equal("{\"message\": \"content by lua block\"}\n", string(body))
	})
	t.Run("Should return return error jwt without kid", func(t *testing.T) {
		assert := assertTestify.New(t)
		containerTest.Clear()
		containerTest.ChangeNginxConfigReadFile("./nginx/nginx.private.jwks.conf")
		jwtWithoutKID, jwks, err := jwks_test.Generate(
			jwks_test.JWTParams{KID: ""}, jwks_test.JWKSParams{KID: "tsuru-kid-123"})
		assert.NoError(err)
		containerTest.AddFiles([]container_test.File{
			{Path: "/usr/share/tokens/jwks.json", File: jwks},
		})
		body, statusCode, err := request_test.Do(request_test.Params{
			URL:         URL,
			HeaderKey:   "Authorization",
			HeaderValue: fmt.Sprintf("Bearer %s", jwtWithoutKID),
		})
		assert.NoError(err)
		assert.Equal(http.StatusUnauthorized, statusCode)
		assert.Equal("{\"message\":\"kid not found\"}\n", string(body))
	})

	t.Run("Should return error when jwt is generated by another key", func(t *testing.T) {
		assert := assertTestify.New(t)
		containerTest.Clear()
		containerTest.ChangeNginxConfigReadFile("./nginx/nginx.private.jwks.conf")
		_, jwks, err := jwks_test.Generate(
			jwks_test.JWTParams{}, jwks_test.JWKSParams{KID: "tsuru-kid-123"})
		assert.NoError(err)
		keyPrivate, _, _ := jwks_test.GenerateRSAKeys()
		jwtWithAnotherKey, err := jwks_test.CreateJWT(keyPrivate, jwks_test.JWTParams{
			KID: "tsuru-kid-123",
		})
		assert.NoError(err)
		containerTest.AddFiles([]container_test.File{
			{Path: "/usr/share/tokens/jwks.json", File: jwks},
		})
		body, statusCode, err := request_test.Do(request_test.Params{
			URL:         URL,
			HeaderKey:   "Authorization",
			HeaderValue: fmt.Sprintf("Bearer %s", jwtWithAnotherKey),
		})
		assert.NoError(err)
		assert.Equal(http.StatusUnauthorized, statusCode)
		assert.Equal("{\"message\":\"token not valid\"}\n", string(body))
	})
	t.Run("Should return error when jwt header is not token", func(t *testing.T) {
		assert := assertTestify.New(t)
		containerTest.Clear()
		containerTest.ChangeNginxConfigReadFile("./nginx/nginx.private.jwks.conf")
		_, jwks, err := jwks_test.Generate(
			jwks_test.JWTParams{}, jwks_test.JWKSParams{KID: "tsuru-kid-123"})
		assert.NoError(err)
		containerTest.AddFiles([]container_test.File{
			{Path: "/usr/share/tokens/jwks.json", File: jwks},
		})
		body, statusCode, err := request_test.Do(request_test.Params{
			URL:         URL,
			HeaderKey:   "Authorization",
			HeaderValue: "Bearer 123",
		})
		assert.NoError(err)
		assert.Equal(http.StatusUnauthorized, statusCode)
		assert.Equal("{\"message\":\"JWT invalid\"}\n", string(body))
	})
	t.Run("Should return error when jwt header is not found token", func(t *testing.T) {
		assert := assertTestify.New(t)
		containerTest.Clear()
		containerTest.ChangeNginxConfigReadFile("./nginx/nginx.private.jwks.conf")
		_, jwks, err := jwks_test.Generate(
			jwks_test.JWTParams{}, jwks_test.JWKSParams{KID: "tsuru-kid-123"})
		assert.NoError(err)
		containerTest.AddFiles([]container_test.File{
			{Path: "/usr/share/tokens/jwks.json", File: jwks},
		})
		body, statusCode, err := request_test.Do(request_test.Params{
			URL:         URL,
			HeaderKey:   "Authorization",
			HeaderValue: "Bearer",
		})
		assert.NoError(err)
		assert.Equal(http.StatusUnauthorized, statusCode)
		assert.Equal("{\"message\":\"token not found\"}\n", string(body))
	})
	t.Run("Should return error when kid is different of jwt and jwks", func(t *testing.T) {
		assert := assertTestify.New(t)
		containerTest.Clear()
		containerTest.ChangeNginxConfigReadFile("./nginx/nginx.private.jwks.conf")
		jwt, jwks, err := jwks_test.Generate(
			jwks_test.JWTParams{KID: "tsuru-kid-456"}, jwks_test.JWKSParams{KID: "tsuru-kid-123"})
		assert.NoError(err)
		containerTest.AddFiles([]container_test.File{
			{Path: "/usr/share/tokens/jwks.json", File: jwks},
		})
		body, statusCode, err := request_test.Do(request_test.Params{
			URL:         URL,
			HeaderKey:   "Authorization",
			HeaderValue: fmt.Sprintf("Bearer %s", jwt),
		})
		assert.NoError(err)
		assert.Equal(http.StatusUnauthorized, statusCode)
		assert.Equal("{\"message\":\"token not valid\"}\n", string(body))
	})
	t.Run("Should return error when token in header different of param", func(t *testing.T) {
		assert := assertTestify.New(t)
		containerTest.Clear()
		containerTest.ChangeNginxConfigReadFile("./nginx/nginx.private.jwks.conf")
		jwt, jwks, err := jwks_test.Generate(
			jwks_test.JWTParams{KID: "tsuru-kid-123"}, jwks_test.JWKSParams{KID: "tsuru-kid-123"})
		assert.NoError(err)
		containerTest.AddFiles([]container_test.File{
			{Path: "/usr/share/tokens/jwks.json", File: jwks},
		})
		body, statusCode, err := request_test.Do(request_test.Params{
			URL:         URL,
			HeaderKey:   "Token",
			HeaderValue: fmt.Sprintf("Bearer %s", jwt),
		})
		assert.NoError(err)
		assert.Equal(http.StatusUnauthorized, statusCode)
		assert.Equal("{\"message\":\"token not found\"}\n", string(body))
	})
}
